C의 절차 + 객체지향 + 템플릿 

C++은 위 세가지를 실현함.

C는 절차 지향, 데이터 보단 알고리즘 중시.

포트란 베이직 언어는 커지면 분기가 복잡해졌다.
과학자들은 구조적 프로그래밍 기법 고안했다.(분기 제한)
하향식 설계이 하나의 실현 예이다.

규모가 커지면 여전히 문제가 생김.
객체지향은 데이터 중시.

해결해야할 문제를 언어의 절차에 끼워넣지 않고,
언어자체를 해결해야 할 문제에 맞췄다.


" 해결해야할 문제에 맞게 데이터형 자체를 설계했다."


프로그램을 설계하려면 이러한 클래스를 먼저 설계 한다.
저수준 클래스에서 고수준 클래스로 설계하는 상향식 방법을 택한다.

링커는

사용자의  목적 코드, 라이브러리 목적 코드, 시동 코드를 링크하여 실행가능 코드를 만든다.

클래스는 객체의 설계도이다. 클래스는 객체형 (object type), 객체를 객체 인스턴스, 인스턴스의 변수라고 한다.
클래스가 구현된게 객체이다.

namespace는 다양한 s/w 벤더 들이 같은 이름 사용을 구분하기 위해 사용한다.

iostream의 cin, cout은 객체이다. << >> 은 객체가 재지정한 연산자이다.



C++ 은 malloc 보다 나은 new라는 키워드로 동적할당을 지원함.

int *pn = new int;

int	higgens;
int *pn = & higgens;

pn 은 데이터 객체를 지시하고 있다.
데이터 객체란 어떤 데이터를 저장하기 위해 할당한 메모리 블럭이다.
변수는 하나의 데이터 객체지만, pn 이 지시하는건 변수는 아니다. 
(변수는 데이터 객체 에 포함되는 개념. 데이터 객체는 더 포괄적인 개념이다. 메모리를 차지하고 있는 상수도 데이터 객체)

객체도 스택에 생성 가능하다. 반드시 동적 할당 해야하는건 아니다.

